//----------------------------------------------------------------------------
// Anti-Grain Geometry - Version 2.4
// Copyright (C) 2002-2005 Maxim Shemanarev (http://www.antigrain.com)
//
// Permission to copy, use, modify, sell and distribute this software
// is granted provided this copyright notice appears in all copies.
// This software is provided "as is" without express or implied
// warranty, and with no claim as to its suitability for any purpose.
//
//----------------------------------------------------------------------------
// Contact: mcseem@antigrain.com
//          mcseemagg@yahoo.com
//          http://www.antigrain.com
//----------------------------------------------------------------------------
//
// Class GsvText
//
//----------------------------------------------------------------------------

use std::fs::File;
use std::io::Read;
use std::ptr::null_mut;

use crate::array::PodArray;
use crate::basics::PathCmd;
use crate::bounding_rect::bounding_rect_single;
use crate::math_stroke::{LineCap, LineJoin};
use crate::{ VertexSource, Transformer };
use crate::conv_stroke::ConvStroke;
use crate::conv_transform::ConvTransform;
use crate::trans_affine::TransAffine;

enum Status {
    Initial,
    NextChar,
    StartGlyph,
    Glyph,
}

pub struct GsvText {
    x: f64,
    y: f64,
    start_x: f64,
    width: f64,
    height: f64,
    space: f64,
    line_space: f64,
    chr: [u8; 2],
    text: *mut u8,
    text_buf: PodArray<u8>,
    cur_chr: *mut u8,
    font: *const u8,
    loaded_font: PodArray<u8>,
    status: Status,
    big_endian: bool,
    flip: bool,
    indices: *mut u8,
    glyphs: *mut u8,
    bglyph: *mut u8,
    eglyph: *mut u8,
    w: f64,
    h: f64,
}

impl GsvText {
    pub fn new() -> GsvText {
        GsvText {
            x: 0.0,
            y: 0.0,
            start_x: 0.0,
            width: 0.0,
            height: 0.0,
            space: 0.0,
            line_space: 0.0,
            chr: [0; 2],
            text: std::ptr::null_mut::<u8>(),
            text_buf: PodArray::<u8>::new(),
            cur_chr: null_mut(),
            font: GSV_DEFAULT_FONT.as_ptr(),
            loaded_font: PodArray::<u8>::new(),
            status: Status::Initial,
            big_endian: false,
            flip: false,
            indices: 0 as *mut u8,
            glyphs: 0 as *mut u8,
            bglyph: 0 as *mut u8,
            eglyph: 0 as *mut u8,
            w: 0.0,
            h: 0.0,
        }
        //chr[0] = chr[1] = 0;

        //int t = 1;
        //if(*(char*)&t == 0) big_endian = true;
    }

    pub fn set_font(&mut self, font: *const u8) {
        self.font = font;
        if self.font.is_null() && !self.loaded_font.is_empty() {
            self.font = &self.loaded_font[0];
        }
    }

    pub fn load_font(&mut self, file: &str) {
        self.loaded_font.clear();
        let mut fd = match File::open(file) {
            Ok(fd) => fd,
            Err(_) => return,
        };

        let len = match fd.metadata() {
            Ok(data) => data.len() as usize,
            Err(_) => return,
        };

        if len > 0 {
            let mut buf = vec![0; len];
            fd.read(&mut buf).unwrap();
            self.loaded_font = buf;
            self.font = &self.loaded_font[0];
        }
    }

    pub fn set_flip(&mut self, flip_y: bool) {
        self.flip = flip_y;
    }

    pub fn set_size(&mut self, height: f64, width: f64) {
        self.height = height;
        self.width = width;
    }
    pub fn set_space(&mut self, space: f64) {
        self.space = space;
    }
    pub fn set_line_space(&mut self, line_space: f64) {
        self.line_space = line_space;
    }
    pub fn set_start_point(&mut self, x: f64, y: f64) {
        self.x = x;
        self.y = y;
        self.start_x = x;
    }

    pub fn value(&self, p: *mut u8) -> u16 {
        let mut v: u16;
        let mut _u: u16;
        unsafe {
            if self.big_endian {
                v = *(p as *const u8) as u16;
                v = (v << 8) | (*(p as *const u8).offset(1)) as u16;
            } else {
                v = *(p as *const u8).offset(1) as u16;
                _u = *(p as *const u8) as u16;
                v = (v << 8) | (*(p as *const u8)) as u16;
            }
        }
        v
    }

    pub fn set_text(&mut self, text: &str) {
        if text.len() == 0 {
            self.text_buf = self.chr.to_vec();
        } else {
            self.text_buf = text.as_bytes().to_vec();
        }
        if self.text_buf[self.text_buf.len() - 1] != 0 {
            self.text_buf.push(0);
        }
        self.text = self.text_buf.as_mut_ptr();
    }

    pub fn text_width(&mut self) -> f64 {
        let mut x1: f64 = 0.0;
        let mut y1: f64 = 0.0;
        let mut x2: f64 = 0.0;
        let mut y2: f64 = 0.0;
        bounding_rect_single(self, 0, &mut x1, &mut y1, &mut x2, &mut y2);
        return x2 - x1;
    }
}

impl VertexSource for GsvText {
    fn rewind(&mut self, _: u32) {
        self.status = Status::Initial;
        if self.font.is_null() {
            return;
        }
        self.indices = self.font as *mut u8;
        unsafe {
            let base_height = self.value(self.indices.offset(4)) as f64;
            self.indices = self.indices.offset(self.value(self.indices) as isize);
            self.glyphs = self.indices.offset(257 * 2) as *mut u8;
            self.h = self.height / base_height;
            self.w = if self.width == 0.0 {
                self.h
            } else {
                self.width / base_height
            };
        }
        if self.flip {
            self.h = -self.h;
        }
        self.cur_chr = self.text;
    }

    fn vertex(&mut self, x: &mut f64, y: &mut f64) -> u32 {
        let mut quit = false;
        let (mut yc, yf): (i8, i8);
        let (dx, dy): (i32, i32);
        let mut idx: u32;

        while !quit {
            match self.status {
                Status::Initial => {
                    if self.font.is_null() {
                        quit = true;
                    } else {
                        self.status = Status::NextChar;
                    }
                }
                Status::NextChar => {
                    if unsafe { *self.cur_chr } == 0 {
                        quit = true;
                    } else {
                        unsafe {
                            idx = (*self.cur_chr) as u32 & 0xFF;
                            self.cur_chr = self.cur_chr.offset(1);
                        }
                        if idx == '\n' as u32 {
                            self.x = self.start_x;
                            self.y -= if self.flip {
                                -self.height - self.line_space
                            } else {
                                self.height + self.line_space
                            };
                            self.status = Status::NextChar;
                        } else {
                            idx = idx << 1;
                            unsafe {
                                self.bglyph =
                                    self.glyphs
                                        .offset(self.value(self.indices.offset(idx as isize))
                                            as isize);
                                self.eglyph = self
                                    .glyphs
                                    .offset(self.value(self.indices.offset(idx as isize + 2))
                                        as isize);
                            }
                            self.status = Status::StartGlyph;
                        }
                    }
                }
                Status::StartGlyph => {
                    *x = self.x;
                    *y = self.y;
                    self.status = Status::Glyph;
                    return PathCmd::MoveTo as u32;
                }
                Status::Glyph => {
                    if self.bglyph >= self.eglyph {
                        self.status = Status::NextChar;
                        self.x += self.space;
                    } else {
                        unsafe {
                            dx = *self.bglyph as i8 as i32;
                            self.bglyph = self.bglyph.offset(1);
                            yc = *self.bglyph as i8;
                        }
                        yf = (yc as u8 & 0x80) as i8;
                        yc <<= 1;
                        yc >>= 1;
                        dy = yc as i32;
                        self.bglyph = unsafe { self.bglyph.offset(1) };
                        self.x += dx as f64 * self.w;
                        self.y += dy as f64 * self.h;
                        *x = self.x;
                        *y = self.y;
                        return if yf != 0 {
                            PathCmd::MoveTo as u32
                        } else {
                            PathCmd::LineTo as u32
                        };
                    }
                }
            }
        }
        PathCmd::Stop as u32
    }
}

//--------------------------------------------------------GsvTextOutline
pub struct GsvTextOutline<'a, T: Transformer = TransAffine> {
    //polyline: ConvStroke<GsvText>,
    trans: ConvTransform<'a, ConvStroke<'a,GsvText>, T>,
}

impl<'a, T: Transformer> GsvTextOutline<'a, T> {
    pub fn new(text: GsvText, trans: T) -> Self {
        let cs = ConvStroke::new_owned(text);
        let ct = ConvTransform::new_owned(cs, trans);
        Self {
            //polyline: cs,
            trans: ct,
        }
    }

    pub fn set_width(&mut self, w: f64) {
        self.trans.source_mut().set_width(w);
    }

    pub fn set_transformer(&mut self, trans: T) -> T {
        self.trans.set_transformer(trans)
    }

	pub fn source_mut(&mut self) -> &mut GsvText {
		self.trans.source_mut().source_mut()
	}
}

impl<'a, T: Transformer> VertexSource for  GsvTextOutline<'a, T> {
    fn rewind(&mut self, path_id: u32) {
        self.trans.rewind(path_id);
        self.trans.source_mut().set_line_join(LineJoin::Round);
        self.trans.source_mut().set_line_cap(LineCap::Round);
    }

    fn vertex(&mut self, x: &mut f64, y: &mut f64) -> u32 {
        self.trans.vertex(x, y)
    }
}

const GSV_DEFAULT_FONT: [u8; 4526] = [
    0x40, 0x00, 0x6c, 0x0f, 0x15, 0x00, 0x0e, 0x00, 0xf9, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0d, 0x0a, 0x0d, 0x0a, 0x46, 0x6f, 0x6e, 0x74, 0x20, 0x28, 0x63, 0x29,
    0x20, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x50, 0x72, 0x6f, 0x66, 0x20, 0x32, 0x37, 0x20, 0x53, 0x65,
    0x70, 0x74, 0x65, 0x6d, 0x62, 0x2e, 0x31, 0x39, 0x38, 0x39, 0x00, 0x0d, 0x0a, 0x0d, 0x0a, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x00, 0x12, 0x00, 0x34, 0x00, 0x46, 0x00, 0x94, 0x00, 0xd0, 0x00, 0x2e, 0x01,
    0x3e, 0x01, 0x64, 0x01, 0x8a, 0x01, 0x98, 0x01, 0xa2, 0x01, 0xb4, 0x01, 0xba, 0x01, 0xc6, 0x01,
    0xcc, 0x01, 0xf0, 0x01, 0xfa, 0x01, 0x18, 0x02, 0x38, 0x02, 0x44, 0x02, 0x68, 0x02, 0x98, 0x02,
    0xa2, 0x02, 0xde, 0x02, 0x0e, 0x03, 0x24, 0x03, 0x40, 0x03, 0x48, 0x03, 0x52, 0x03, 0x5a, 0x03,
    0x82, 0x03, 0xec, 0x03, 0xfa, 0x03, 0x26, 0x04, 0x4c, 0x04, 0x6a, 0x04, 0x7c, 0x04, 0x8a, 0x04,
    0xb6, 0x04, 0xc4, 0x04, 0xca, 0x04, 0xe0, 0x04, 0xee, 0x04, 0xf8, 0x04, 0x0a, 0x05, 0x18, 0x05,
    0x44, 0x05, 0x5e, 0x05, 0x8e, 0x05, 0xac, 0x05, 0xd6, 0x05, 0xe0, 0x05, 0xf6, 0x05, 0x00, 0x06,
    0x12, 0x06, 0x1c, 0x06, 0x28, 0x06, 0x36, 0x06, 0x48, 0x06, 0x4e, 0x06, 0x60, 0x06, 0x6e, 0x06,
    0x74, 0x06, 0x84, 0x06, 0xa6, 0x06, 0xc8, 0x06, 0xe6, 0x06, 0x08, 0x07, 0x2c, 0x07, 0x3c, 0x07,
    0x68, 0x07, 0x7c, 0x07, 0x8c, 0x07, 0xa2, 0x07, 0xb0, 0x07, 0xb6, 0x07, 0xd8, 0x07, 0xec, 0x07,
    0x10, 0x08, 0x32, 0x08, 0x54, 0x08, 0x64, 0x08, 0x88, 0x08, 0x98, 0x08, 0xac, 0x08, 0xb6, 0x08,
    0xc8, 0x08, 0xd2, 0x08, 0xe4, 0x08, 0xf2, 0x08, 0x3e, 0x09, 0x48, 0x09, 0x94, 0x09, 0xc2, 0x09,
    0xc4, 0x09, 0xd0, 0x09, 0xe2, 0x09, 0x04, 0x0a, 0x0e, 0x0a, 0x26, 0x0a, 0x34, 0x0a, 0x4a, 0x0a,
    0x66, 0x0a, 0x70, 0x0a, 0x7e, 0x0a, 0x8e, 0x0a, 0x9a, 0x0a, 0xa6, 0x0a, 0xb4, 0x0a, 0xd8, 0x0a,
    0xe2, 0x0a, 0xf6, 0x0a, 0x18, 0x0b, 0x22, 0x0b, 0x32, 0x0b, 0x56, 0x0b, 0x60, 0x0b, 0x6e, 0x0b,
    0x7c, 0x0b, 0x8a, 0x0b, 0x9c, 0x0b, 0x9e, 0x0b, 0xb2, 0x0b, 0xc2, 0x0b, 0xd8, 0x0b, 0xf4, 0x0b,
    0x08, 0x0c, 0x30, 0x0c, 0x56, 0x0c, 0x72, 0x0c, 0x90, 0x0c, 0xb2, 0x0c, 0xce, 0x0c, 0xe2, 0x0c,
    0xfe, 0x0c, 0x10, 0x0d, 0x26, 0x0d, 0x36, 0x0d, 0x42, 0x0d, 0x4e, 0x0d, 0x5c, 0x0d, 0x78, 0x0d,
    0x8c, 0x0d, 0x8e, 0x0d, 0x90, 0x0d, 0x92, 0x0d, 0x94, 0x0d, 0x96, 0x0d, 0x98, 0x0d, 0x9a, 0x0d,
    0x9c, 0x0d, 0x9e, 0x0d, 0xa0, 0x0d, 0xa2, 0x0d, 0xa4, 0x0d, 0xa6, 0x0d, 0xa8, 0x0d, 0xaa, 0x0d,
    0xac, 0x0d, 0xae, 0x0d, 0xb0, 0x0d, 0xb2, 0x0d, 0xb4, 0x0d, 0xb6, 0x0d, 0xb8, 0x0d, 0xba, 0x0d,
    0xbc, 0x0d, 0xbe, 0x0d, 0xc0, 0x0d, 0xc2, 0x0d, 0xc4, 0x0d, 0xc6, 0x0d, 0xc8, 0x0d, 0xca, 0x0d,
    0xcc, 0x0d, 0xce, 0x0d, 0xd0, 0x0d, 0xd2, 0x0d, 0xd4, 0x0d, 0xd6, 0x0d, 0xd8, 0x0d, 0xda, 0x0d,
    0xdc, 0x0d, 0xde, 0x0d, 0xe0, 0x0d, 0xe2, 0x0d, 0xe4, 0x0d, 0xe6, 0x0d, 0xe8, 0x0d, 0xea, 0x0d,
    0xec, 0x0d, 0x0c, 0x0e, 0x26, 0x0e, 0x48, 0x0e, 0x64, 0x0e, 0x88, 0x0e, 0x92, 0x0e, 0xa6, 0x0e,
    0xb4, 0x0e, 0xd0, 0x0e, 0xee, 0x0e, 0x02, 0x0f, 0x16, 0x0f, 0x26, 0x0f, 0x3c, 0x0f, 0x58, 0x0f,
    0x6c, 0x0f, 0x6c, 0x0f, 0x6c, 0x0f, 0x6c, 0x0f, 0x6c, 0x0f, 0x6c, 0x0f, 0x6c, 0x0f, 0x6c, 0x0f,
    0x6c, 0x0f, 0x6c, 0x0f, 0x6c, 0x0f, 0x6c, 0x0f, 0x6c, 0x0f, 0x6c, 0x0f, 0x6c, 0x0f, 0x6c, 0x0f,
    0x6c, 0x0f, 0x10, 0x80, 0x05, 0x95, 0x00, 0x72, 0x00, 0xfb, 0xff, 0x7f, 0x01, 0x7f, 0x01, 0x01,
    0xff, 0x01, 0x05, 0xfe, 0x05, 0x95, 0xff, 0x7f, 0x00, 0x7a, 0x01, 0x86, 0xff, 0x7a, 0x01, 0x87,
    0x01, 0x7f, 0xfe, 0x7a, 0x0a, 0x87, 0xff, 0x7f, 0x00, 0x7a, 0x01, 0x86, 0xff, 0x7a, 0x01, 0x87,
    0x01, 0x7f, 0xfe, 0x7a, 0x05, 0xf2, 0x0b, 0x95, 0xf9, 0x64, 0x0d, 0x9c, 0xf9, 0x64, 0xfa, 0x91,
    0x0e, 0x00, 0xf1, 0xfa, 0x0e, 0x00, 0x04, 0xfc, 0x08, 0x99, 0x00, 0x63, 0x04, 0x9d, 0x00, 0x63,
    0x04, 0x96, 0xff, 0x7f, 0x01, 0x7f, 0x01, 0x01, 0x00, 0x01, 0xfe, 0x02, 0xfd, 0x01, 0xfc, 0x00,
    0xfd, 0x7f, 0xfe, 0x7e, 0x00, 0x7e, 0x01, 0x7e, 0x01, 0x7f, 0x02, 0x7f, 0x06, 0x7e, 0x02, 0x7f,
    0x02, 0x7e, 0xf2, 0x89, 0x02, 0x7e, 0x02, 0x7f, 0x06, 0x7e, 0x02, 0x7f, 0x01, 0x7f, 0x01, 0x7e,
    0x00, 0x7c, 0xfe, 0x7e, 0xfd, 0x7f, 0xfc, 0x00, 0xfd, 0x01, 0xfe, 0x02, 0x00, 0x01, 0x01, 0x01,
    0x01, 0x7f, 0xff, 0x7f, 0x10, 0xfd, 0x15, 0x95, 0xee, 0x6b, 0x05, 0x95, 0x02, 0x7e, 0x00, 0x7e,
    0xff, 0x7e, 0xfe, 0x7f, 0xfe, 0x00, 0xfe, 0x02, 0x00, 0x02, 0x01, 0x02, 0x02, 0x01, 0x02, 0x00,
    0x02, 0x7f, 0x03, 0x7f, 0x03, 0x00, 0x03, 0x01, 0x02, 0x01, 0xfc, 0xf2, 0xfe, 0x7f, 0xff, 0x7e,
    0x00, 0x7e, 0x02, 0x7e, 0x02, 0x00, 0x02, 0x01, 0x01, 0x02, 0x00, 0x02, 0xfe, 0x02, 0xfe, 0x00,
    0x07, 0xf9, 0x15, 0x8d, 0xff, 0x7f, 0x01, 0x7f, 0x01, 0x01, 0x00, 0x01, 0xff, 0x01, 0xff, 0x00,
    0xff, 0x7f, 0xff, 0x7e, 0xfe, 0x7b, 0xfe, 0x7d, 0xfe, 0x7e, 0xfe, 0x7f, 0xfd, 0x00, 0xfd, 0x01,
    0xff, 0x02, 0x00, 0x03, 0x01, 0x02, 0x06, 0x04, 0x02, 0x02, 0x01, 0x02, 0x00, 0x02, 0xff, 0x02,
    0xfe, 0x01, 0xfe, 0x7f, 0xff, 0x7e, 0x00, 0x7e, 0x01, 0x7d, 0x02, 0x7d, 0x05, 0x79, 0x02, 0x7e,
    0x03, 0x7f, 0x01, 0x00, 0x01, 0x01, 0x00, 0x01, 0xf1, 0xfe, 0xfe, 0x01, 0xff, 0x02, 0x00, 0x03,
    0x01, 0x02, 0x02, 0x02, 0x00, 0x86, 0x01, 0x7e, 0x08, 0x75, 0x02, 0x7e, 0x02, 0x7f, 0x05, 0x80,
    0x05, 0x93, 0xff, 0x01, 0x01, 0x01, 0x01, 0x7f, 0x00, 0x7e, 0xff, 0x7e, 0xff, 0x7f, 0x06, 0xf1,
    0x0b, 0x99, 0xfe, 0x7e, 0xfe, 0x7d, 0xfe, 0x7c, 0xff, 0x7b, 0x00, 0x7c, 0x01, 0x7b, 0x02, 0x7c,
    0x02, 0x7d, 0x02, 0x7e, 0xfe, 0x9e, 0xfe, 0x7c, 0xff, 0x7d, 0xff, 0x7b, 0x00, 0x7c, 0x01, 0x7b,
    0x01, 0x7d, 0x02, 0x7c, 0x05, 0x85, 0x03, 0x99, 0x02, 0x7e, 0x02, 0x7d, 0x02, 0x7c, 0x01, 0x7b,
    0x00, 0x7c, 0xff, 0x7b, 0xfe, 0x7c, 0xfe, 0x7d, 0xfe, 0x7e, 0x02, 0x9e, 0x02, 0x7c, 0x01, 0x7d,
    0x01, 0x7b, 0x00, 0x7c, 0xff, 0x7b, 0xff, 0x7d, 0xfe, 0x7c, 0x09, 0x85, 0x08, 0x95, 0x00, 0x74,
    0xfb, 0x89, 0x0a, 0x7a, 0x00, 0x86, 0xf6, 0x7a, 0x0d, 0xf4, 0x0d, 0x92, 0x00, 0x6e, 0xf7, 0x89,
    0x12, 0x00, 0x04, 0xf7, 0x06, 0x81, 0xff, 0x7f, 0xff, 0x01, 0x01, 0x01, 0x01, 0x7f, 0x00, 0x7e,
    0xff, 0x7e, 0xff, 0x7f, 0x06, 0x84, 0x04, 0x89, 0x12, 0x00, 0x04, 0xf7, 0x05, 0x82, 0xff, 0x7f,
    0x01, 0x7f, 0x01, 0x01, 0xff, 0x01, 0x05, 0xfe, 0x00, 0xfd, 0x0e, 0x18, 0x00, 0xeb, 0x09, 0x95,
    0xfd, 0x7f, 0xfe, 0x7d, 0xff, 0x7b, 0x00, 0x7d, 0x01, 0x7b, 0x02, 0x7d, 0x03, 0x7f, 0x02, 0x00,
    0x03, 0x01, 0x02, 0x03, 0x01, 0x05, 0x00, 0x03, 0xff, 0x05, 0xfe, 0x03, 0xfd, 0x01, 0xfe, 0x00,
    0x0b, 0xeb, 0x06, 0x91, 0x02, 0x01, 0x03, 0x03, 0x00, 0x6b, 0x09, 0x80, 0x04, 0x90, 0x00, 0x01,
    0x01, 0x02, 0x01, 0x01, 0x02, 0x01, 0x04, 0x00, 0x02, 0x7f, 0x01, 0x7f, 0x01, 0x7e, 0x00, 0x7e,
    0xff, 0x7e, 0xfe, 0x7d, 0xf6, 0x76, 0x0e, 0x00, 0x03, 0x80, 0x05, 0x95, 0x0b, 0x00, 0xfa, 0x78,
    0x03, 0x00, 0x02, 0x7f, 0x01, 0x7f, 0x01, 0x7d, 0x00, 0x7e, 0xff, 0x7d, 0xfe, 0x7e, 0xfd, 0x7f,
    0xfd, 0x00, 0xfd, 0x01, 0xff, 0x01, 0xff, 0x02, 0x11, 0xfc, 0x0d, 0x95, 0xf6, 0x72, 0x0f, 0x00,
    0xfb, 0x8e, 0x00, 0x6b, 0x07, 0x80, 0x0f, 0x95, 0xf6, 0x00, 0xff, 0x77, 0x01, 0x01, 0x03, 0x01,
    0x03, 0x00, 0x03, 0x7f, 0x02, 0x7e, 0x01, 0x7d, 0x00, 0x7e, 0xff, 0x7d, 0xfe, 0x7e, 0xfd, 0x7f,
    0xfd, 0x00, 0xfd, 0x01, 0xff, 0x01, 0xff, 0x02, 0x11, 0xfc, 0x10, 0x92, 0xff, 0x02, 0xfd, 0x01,
    0xfe, 0x00, 0xfd, 0x7f, 0xfe, 0x7d, 0xff, 0x7b, 0x00, 0x7b, 0x01, 0x7c, 0x02, 0x7e, 0x03, 0x7f,
    0x01, 0x00, 0x03, 0x01, 0x02, 0x02, 0x01, 0x03, 0x00, 0x01, 0xff, 0x03, 0xfe, 0x02, 0xfd, 0x01,
    0xff, 0x00, 0xfd, 0x7f, 0xfe, 0x7e, 0xff, 0x7d, 0x10, 0xf9, 0x11, 0x95, 0xf6, 0x6b, 0xfc, 0x95,
    0x0e, 0x00, 0x03, 0xeb, 0x08, 0x95, 0xfd, 0x7f, 0xff, 0x7e, 0x00, 0x7e, 0x01, 0x7e, 0x02, 0x7f,
    0x04, 0x7f, 0x03, 0x7f, 0x02, 0x7e, 0x01, 0x7e, 0x00, 0x7d, 0xff, 0x7e, 0xff, 0x7f, 0xfd, 0x7f,
    0xfc, 0x00, 0xfd, 0x01, 0xff, 0x01, 0xff, 0x02, 0x00, 0x03, 0x01, 0x02, 0x02, 0x02, 0x03, 0x01,
    0x04, 0x01, 0x02, 0x01, 0x01, 0x02, 0x00, 0x02, 0xff, 0x02, 0xfd, 0x01, 0xfc, 0x00, 0x0c, 0xeb,
    0x10, 0x8e, 0xff, 0x7d, 0xfe, 0x7e, 0xfd, 0x7f, 0xff, 0x00, 0xfd, 0x01, 0xfe, 0x02, 0xff, 0x03,
    0x00, 0x01, 0x01, 0x03, 0x02, 0x02, 0x03, 0x01, 0x01, 0x00, 0x03, 0x7f, 0x02, 0x7e, 0x01, 0x7c,
    0x00, 0x7b, 0xff, 0x7b, 0xfe, 0x7d, 0xfd, 0x7f, 0xfe, 0x00, 0xfd, 0x01, 0xff, 0x02, 0x10, 0xfd,
    0x05, 0x8e, 0xff, 0x7f, 0x01, 0x7f, 0x01, 0x01, 0xff, 0x01, 0x00, 0xf4, 0xff, 0x7f, 0x01, 0x7f,
    0x01, 0x01, 0xff, 0x01, 0x05, 0xfe, 0x05, 0x8e, 0xff, 0x7f, 0x01, 0x7f, 0x01, 0x01, 0xff, 0x01,
    0x01, 0xf3, 0xff, 0x7f, 0xff, 0x01, 0x01, 0x01, 0x01, 0x7f, 0x00, 0x7e, 0xff, 0x7e, 0xff, 0x7f,
    0x06, 0x84, 0x14, 0x92, 0xf0, 0x77, 0x10, 0x77, 0x04, 0x80, 0x04, 0x8c, 0x12, 0x00, 0xee, 0xfa,
    0x12, 0x00, 0x04, 0xfa, 0x04, 0x92, 0x10, 0x77, 0xf0, 0x77, 0x14, 0x80, 0x03, 0x90, 0x00, 0x01,
    0x01, 0x02, 0x01, 0x01, 0x02, 0x01, 0x04, 0x00, 0x02, 0x7f, 0x01, 0x7f, 0x01, 0x7e, 0x00, 0x7e,
    0xff, 0x7e, 0xff, 0x7f, 0xfc, 0x7e, 0x00, 0x7d, 0x00, 0xfb, 0xff, 0x7f, 0x01, 0x7f, 0x01, 0x01,
    0xff, 0x01, 0x09, 0xfe, 0x12, 0x8d, 0xff, 0x02, 0xfe, 0x01, 0xfd, 0x00, 0xfe, 0x7f, 0xff, 0x7f,
    0xff, 0x7d, 0x00, 0x7d, 0x01, 0x7e, 0x02, 0x7f, 0x03, 0x00, 0x02, 0x01, 0x01, 0x02, 0xfb, 0x88,
    0xfe, 0x7e, 0xff, 0x7d, 0x00, 0x7d, 0x01, 0x7e, 0x01, 0x7f, 0x07, 0x8b, 0xff, 0x78, 0x00, 0x7e,
    0x02, 0x7f, 0x02, 0x00, 0x02, 0x02, 0x01, 0x03, 0x00, 0x02, 0xff, 0x03, 0xff, 0x02, 0xfe, 0x02,
    0xfe, 0x01, 0xfd, 0x01, 0xfd, 0x00, 0xfd, 0x7f, 0xfe, 0x7f, 0xfe, 0x7e, 0xff, 0x7e, 0xff, 0x7d,
    0x00, 0x7d, 0x01, 0x7d, 0x01, 0x7e, 0x02, 0x7e, 0x02, 0x7f, 0x03, 0x7f, 0x03, 0x00, 0x03, 0x01,
    0x02, 0x01, 0x01, 0x01, 0xfe, 0x8d, 0xff, 0x78, 0x00, 0x7e, 0x01, 0x7f, 0x08, 0xfb, 0x09, 0x95,
    0xf8, 0x6b, 0x08, 0x95, 0x08, 0x6b, 0xf3, 0x87, 0x0a, 0x00, 0x04, 0xf9, 0x04, 0x95, 0x00, 0x6b,
    0x00, 0x95, 0x09, 0x00, 0x03, 0x7f, 0x01, 0x7f, 0x01, 0x7e, 0x00, 0x7e, 0xff, 0x7e, 0xff, 0x7f,
    0xfd, 0x7f, 0xf7, 0x80, 0x09, 0x00, 0x03, 0x7f, 0x01, 0x7f, 0x01, 0x7e, 0x00, 0x7d, 0xff, 0x7e,
    0xff, 0x7f, 0xfd, 0x7f, 0xf7, 0x00, 0x11, 0x80, 0x12, 0x90, 0xff, 0x02, 0xfe, 0x02, 0xfe, 0x01,
    0xfc, 0x00, 0xfe, 0x7f, 0xfe, 0x7e, 0xff, 0x7e, 0xff, 0x7d, 0x00, 0x7b, 0x01, 0x7d, 0x01, 0x7e,
    0x02, 0x7e, 0x02, 0x7f, 0x04, 0x00, 0x02, 0x01, 0x02, 0x02, 0x01, 0x02, 0x03, 0xfb, 0x04, 0x95,
    0x00, 0x6b, 0x00, 0x95, 0x07, 0x00, 0x03, 0x7f, 0x02, 0x7e, 0x01, 0x7e, 0x01, 0x7d, 0x00, 0x7b,
    0xff, 0x7d, 0xff, 0x7e, 0xfe, 0x7e, 0xfd, 0x7f, 0xf9, 0x00, 0x11, 0x80, 0x04, 0x95, 0x00, 0x6b,
    0x00, 0x95, 0x0d, 0x00, 0xf3, 0xf6, 0x08, 0x00, 0xf8, 0xf5, 0x0d, 0x00, 0x02, 0x80, 0x04, 0x95,
    0x00, 0x6b, 0x00, 0x95, 0x0d, 0x00, 0xf3, 0xf6, 0x08, 0x00, 0x06, 0xf5, 0x12, 0x90, 0xff, 0x02,
    0xfe, 0x02, 0xfe, 0x01, 0xfc, 0x00, 0xfe, 0x7f, 0xfe, 0x7e, 0xff, 0x7e, 0xff, 0x7d, 0x00, 0x7b,
    0x01, 0x7d, 0x01, 0x7e, 0x02, 0x7e, 0x02, 0x7f, 0x04, 0x00, 0x02, 0x01, 0x02, 0x02, 0x01, 0x02,
    0x00, 0x03, 0xfb, 0x80, 0x05, 0x00, 0x03, 0xf8, 0x04, 0x95, 0x00, 0x6b, 0x0e, 0x95, 0x00, 0x6b,
    0xf2, 0x8b, 0x0e, 0x00, 0x04, 0xf5, 0x04, 0x95, 0x00, 0x6b, 0x04, 0x80, 0x0c, 0x95, 0x00, 0x70,
    0xff, 0x7d, 0xff, 0x7f, 0xfe, 0x7f, 0xfe, 0x00, 0xfe, 0x01, 0xff, 0x01, 0xff, 0x03, 0x00, 0x02,
    0x0e, 0xf9, 0x04, 0x95, 0x00, 0x6b, 0x0e, 0x95, 0xf2, 0x72, 0x05, 0x85, 0x09, 0x74, 0x03, 0x80,
    0x04, 0x95, 0x00, 0x6b, 0x00, 0x80, 0x0c, 0x00, 0x01, 0x80, 0x04, 0x95, 0x00, 0x6b, 0x00, 0x95,
    0x08, 0x6b, 0x08, 0x95, 0xf8, 0x6b, 0x08, 0x95, 0x00, 0x6b, 0x04, 0x80, 0x04, 0x95, 0x00, 0x6b,
    0x00, 0x95, 0x0e, 0x6b, 0x00, 0x95, 0x00, 0x6b, 0x04, 0x80, 0x09, 0x95, 0xfe, 0x7f, 0xfe, 0x7e,
    0xff, 0x7e, 0xff, 0x7d, 0x00, 0x7b, 0x01, 0x7d, 0x01, 0x7e, 0x02, 0x7e, 0x02, 0x7f, 0x04, 0x00,
    0x02, 0x01, 0x02, 0x02, 0x01, 0x02, 0x01, 0x03, 0x00, 0x05, 0xff, 0x03, 0xff, 0x02, 0xfe, 0x02,
    0xfe, 0x01, 0xfc, 0x00, 0x0d, 0xeb, 0x04, 0x95, 0x00, 0x6b, 0x00, 0x95, 0x09, 0x00, 0x03, 0x7f,
    0x01, 0x7f, 0x01, 0x7e, 0x00, 0x7d, 0xff, 0x7e, 0xff, 0x7f, 0xfd, 0x7f, 0xf7, 0x00, 0x11, 0xf6,
    0x09, 0x95, 0xfe, 0x7f, 0xfe, 0x7e, 0xff, 0x7e, 0xff, 0x7d, 0x00, 0x7b, 0x01, 0x7d, 0x01, 0x7e,
    0x02, 0x7e, 0x02, 0x7f, 0x04, 0x00, 0x02, 0x01, 0x02, 0x02, 0x01, 0x02, 0x01, 0x03, 0x00, 0x05,
    0xff, 0x03, 0xff, 0x02, 0xfe, 0x02, 0xfe, 0x01, 0xfc, 0x00, 0x03, 0xef, 0x06, 0x7a, 0x04, 0x82,
    0x04, 0x95, 0x00, 0x6b, 0x00, 0x95, 0x09, 0x00, 0x03, 0x7f, 0x01, 0x7f, 0x01, 0x7e, 0x00, 0x7e,
    0xff, 0x7e, 0xff, 0x7f, 0xfd, 0x7f, 0xf7, 0x00, 0x07, 0x80, 0x07, 0x75, 0x03, 0x80, 0x11, 0x92,
    0xfe, 0x02, 0xfd, 0x01, 0xfc, 0x00, 0xfd, 0x7f, 0xfe, 0x7e, 0x00, 0x7e, 0x01, 0x7e, 0x01, 0x7f,
    0x02, 0x7f, 0x06, 0x7e, 0x02, 0x7f, 0x01, 0x7f, 0x01, 0x7e, 0x00, 0x7d, 0xfe, 0x7e, 0xfd, 0x7f,
    0xfc, 0x00, 0xfd, 0x01, 0xfe, 0x02, 0x11, 0xfd, 0x08, 0x95, 0x00, 0x6b, 0xf9, 0x95, 0x0e, 0x00,
    0x01, 0xeb, 0x04, 0x95, 0x00, 0x71, 0x01, 0x7d, 0x02, 0x7e, 0x03, 0x7f, 0x02, 0x00, 0x03, 0x01,
    0x02, 0x02, 0x01, 0x03, 0x00, 0x0f, 0x04, 0xeb, 0x01, 0x95, 0x08, 0x6b, 0x08, 0x95, 0xf8, 0x6b,
    0x09, 0x80, 0x02, 0x95, 0x05, 0x6b, 0x05, 0x95, 0xfb, 0x6b, 0x05, 0x95, 0x05, 0x6b, 0x05, 0x95,
    0xfb, 0x6b, 0x07, 0x80, 0x03, 0x95, 0x0e, 0x6b, 0x00, 0x95, 0xf2, 0x6b, 0x11, 0x80, 0x01, 0x95,
    0x08, 0x76, 0x00, 0x75, 0x08, 0x95, 0xf8, 0x76, 0x09, 0xf5, 0x11, 0x95, 0xf2, 0x6b, 0x00, 0x95,
    0x0e, 0x00, 0xf2, 0xeb, 0x0e, 0x00, 0x03, 0x80, 0x03, 0x93, 0x00, 0x6c, 0x01, 0x94, 0x00, 0x6c,
    0xff, 0x94, 0x05, 0x00, 0xfb, 0xec, 0x05, 0x00, 0x02, 0x81, 0x00, 0x95, 0x0e, 0x68, 0x00, 0x83,
    0x06, 0x93, 0x00, 0x6c, 0x01, 0x94, 0x00, 0x6c, 0xfb, 0x94, 0x05, 0x00, 0xfb, 0xec, 0x05, 0x00,
    0x03, 0x81, 0x03, 0x87, 0x08, 0x05, 0x08, 0x7b, 0xf0, 0x80, 0x08, 0x04, 0x08, 0x7c, 0x03, 0xf9,
    0x01, 0x80, 0x10, 0x00, 0x01, 0x80, 0x06, 0x95, 0xff, 0x7f, 0xff, 0x7e, 0x00, 0x7e, 0x01, 0x7f,
    0x01, 0x01, 0xff, 0x01, 0x05, 0xef, 0x0f, 0x8e, 0x00, 0x72, 0x00, 0x8b, 0xfe, 0x02, 0xfe, 0x01,
    0xfd, 0x00, 0xfe, 0x7f, 0xfe, 0x7e, 0xff, 0x7d, 0x00, 0x7e, 0x01, 0x7d, 0x02, 0x7e, 0x02, 0x7f,
    0x03, 0x00, 0x02, 0x01, 0x02, 0x02, 0x04, 0xfd, 0x04, 0x95, 0x00, 0x6b, 0x00, 0x8b, 0x02, 0x02,
    0x02, 0x01, 0x03, 0x00, 0x02, 0x7f, 0x02, 0x7e, 0x01, 0x7d, 0x00, 0x7e, 0xff, 0x7d, 0xfe, 0x7e,
    0xfe, 0x7f, 0xfd, 0x00, 0xfe, 0x01, 0xfe, 0x02, 0x0f, 0xfd, 0x0f, 0x8b, 0xfe, 0x02, 0xfe, 0x01,
    0xfd, 0x00, 0xfe, 0x7f, 0xfe, 0x7e, 0xff, 0x7d, 0x00, 0x7e, 0x01, 0x7d, 0x02, 0x7e, 0x02, 0x7f,
    0x03, 0x00, 0x02, 0x01, 0x02, 0x02, 0x03, 0xfd, 0x0f, 0x95, 0x00, 0x6b, 0x00, 0x8b, 0xfe, 0x02,
    0xfe, 0x01, 0xfd, 0x00, 0xfe, 0x7f, 0xfe, 0x7e, 0xff, 0x7d, 0x00, 0x7e, 0x01, 0x7d, 0x02, 0x7e,
    0x02, 0x7f, 0x03, 0x00, 0x02, 0x01, 0x02, 0x02, 0x04, 0xfd, 0x03, 0x88, 0x0c, 0x00, 0x00, 0x02,
    0xff, 0x02, 0xff, 0x01, 0xfe, 0x01, 0xfd, 0x00, 0xfe, 0x7f, 0xfe, 0x7e, 0xff, 0x7d, 0x00, 0x7e,
    0x01, 0x7d, 0x02, 0x7e, 0x02, 0x7f, 0x03, 0x00, 0x02, 0x01, 0x02, 0x02, 0x03, 0xfd, 0x0a, 0x95,
    0xfe, 0x00, 0xfe, 0x7f, 0xff, 0x7d, 0x00, 0x6f, 0xfd, 0x8e, 0x07, 0x00, 0x03, 0xf2, 0x0f, 0x8e,
    0x00, 0x70, 0xff, 0x7d, 0xff, 0x7f, 0xfe, 0x7f, 0xfd, 0x00, 0xfe, 0x01, 0x09, 0x91, 0xfe, 0x02,
    0xfe, 0x01, 0xfd, 0x00, 0xfe, 0x7f, 0xfe, 0x7e, 0xff, 0x7d, 0x00, 0x7e, 0x01, 0x7d, 0x02, 0x7e,
    0x02, 0x7f, 0x03, 0x00, 0x02, 0x01, 0x02, 0x02, 0x04, 0xfd, 0x04, 0x95, 0x00, 0x6b, 0x00, 0x8a,
    0x03, 0x03, 0x02, 0x01, 0x03, 0x00, 0x02, 0x7f, 0x01, 0x7d, 0x00, 0x76, 0x04, 0x80, 0x03, 0x95,
    0x01, 0x7f, 0x01, 0x01, 0xff, 0x01, 0xff, 0x7f, 0x01, 0xf9, 0x00, 0x72, 0x04, 0x80, 0x05, 0x95,
    0x01, 0x7f, 0x01, 0x01, 0xff, 0x01, 0xff, 0x7f, 0x01, 0xf9, 0x00, 0x6f, 0xff, 0x7d, 0xfe, 0x7f,
    0xfe, 0x00, 0x09, 0x87, 0x04, 0x95, 0x00, 0x6b, 0x0a, 0x8e, 0xf6, 0x76, 0x04, 0x84, 0x07, 0x78,
    0x02, 0x80, 0x04, 0x95, 0x00, 0x6b, 0x04, 0x80, 0x04, 0x8e, 0x00, 0x72, 0x00, 0x8a, 0x03, 0x03,
    0x02, 0x01, 0x03, 0x00, 0x02, 0x7f, 0x01, 0x7d, 0x00, 0x76, 0x00, 0x8a, 0x03, 0x03, 0x02, 0x01,
    0x03, 0x00, 0x02, 0x7f, 0x01, 0x7d, 0x00, 0x76, 0x04, 0x80, 0x04, 0x8e, 0x00, 0x72, 0x00, 0x8a,
    0x03, 0x03, 0x02, 0x01, 0x03, 0x00, 0x02, 0x7f, 0x01, 0x7d, 0x00, 0x76, 0x04, 0x80, 0x08, 0x8e,
    0xfe, 0x7f, 0xfe, 0x7e, 0xff, 0x7d, 0x00, 0x7e, 0x01, 0x7d, 0x02, 0x7e, 0x02, 0x7f, 0x03, 0x00,
    0x02, 0x01, 0x02, 0x02, 0x01, 0x03, 0x00, 0x02, 0xff, 0x03, 0xfe, 0x02, 0xfe, 0x01, 0xfd, 0x00,
    0x0b, 0xf2, 0x04, 0x8e, 0x00, 0x6b, 0x00, 0x92, 0x02, 0x02, 0x02, 0x01, 0x03, 0x00, 0x02, 0x7f,
    0x02, 0x7e, 0x01, 0x7d, 0x00, 0x7e, 0xff, 0x7d, 0xfe, 0x7e, 0xfe, 0x7f, 0xfd, 0x00, 0xfe, 0x01,
    0xfe, 0x02, 0x0f, 0xfd, 0x0f, 0x8e, 0x00, 0x6b, 0x00, 0x92, 0xfe, 0x02, 0xfe, 0x01, 0xfd, 0x00,
    0xfe, 0x7f, 0xfe, 0x7e, 0xff, 0x7d, 0x00, 0x7e, 0x01, 0x7d, 0x02, 0x7e, 0x02, 0x7f, 0x03, 0x00,
    0x02, 0x01, 0x02, 0x02, 0x04, 0xfd, 0x04, 0x8e, 0x00, 0x72, 0x00, 0x88, 0x01, 0x03, 0x02, 0x02,
    0x02, 0x01, 0x03, 0x00, 0x01, 0xf2, 0x0e, 0x8b, 0xff, 0x02, 0xfd, 0x01, 0xfd, 0x00, 0xfd, 0x7f,
    0xff, 0x7e, 0x01, 0x7e, 0x02, 0x7f, 0x05, 0x7f, 0x02, 0x7f, 0x01, 0x7e, 0x00, 0x7f, 0xff, 0x7e,
    0xfd, 0x7f, 0xfd, 0x00, 0xfd, 0x01, 0xff, 0x02, 0x0e, 0xfd, 0x05, 0x95, 0x00, 0x6f, 0x01, 0x7d,
    0x02, 0x7f, 0x02, 0x00, 0xf8, 0x8e, 0x07, 0x00, 0x03, 0xf2, 0x04, 0x8e, 0x00, 0x76, 0x01, 0x7d,
    0x02, 0x7f, 0x03, 0x00, 0x02, 0x01, 0x03, 0x03, 0x00, 0x8a, 0x00, 0x72, 0x04, 0x80, 0x02, 0x8e,
    0x06, 0x72, 0x06, 0x8e, 0xfa, 0x72, 0x08, 0x80, 0x03, 0x8e, 0x04, 0x72, 0x04, 0x8e, 0xfc, 0x72,
    0x04, 0x8e, 0x04, 0x72, 0x04, 0x8e, 0xfc, 0x72, 0x07, 0x80, 0x03, 0x8e, 0x0b, 0x72, 0x00, 0x8e,
    0xf5, 0x72, 0x0e, 0x80, 0x02, 0x8e, 0x06, 0x72, 0x06, 0x8e, 0xfa, 0x72, 0xfe, 0x7c, 0xfe, 0x7e,
    0xfe, 0x7f, 0xff, 0x00, 0x0f, 0x87, 0x0e, 0x8e, 0xf5, 0x72, 0x00, 0x8e, 0x0b, 0x00, 0xf5, 0xf2,
    0x0b, 0x00, 0x03, 0x80, 0x09, 0x99, 0xfe, 0x7f, 0xff, 0x7f, 0xff, 0x7e, 0x00, 0x7e, 0x01, 0x7e,
    0x01, 0x7f, 0x01, 0x7e, 0x00, 0x7e, 0xfe, 0x7e, 0x01, 0x8e, 0xff, 0x7e, 0x00, 0x7e, 0x01, 0x7e,
    0x01, 0x7f, 0x01, 0x7e, 0x00, 0x7e, 0xff, 0x7e, 0xfc, 0x7e, 0x04, 0x7e, 0x01, 0x7e, 0x00, 0x7e,
    0xff, 0x7e, 0xff, 0x7f, 0xff, 0x7e, 0x00, 0x7e, 0x01, 0x7e, 0xff, 0x8e, 0x02, 0x7e, 0x00, 0x7e,
    0xff, 0x7e, 0xff, 0x7f, 0xff, 0x7e, 0x00, 0x7e, 0x01, 0x7e, 0x01, 0x7f, 0x02, 0x7f, 0x05, 0x87,
    0x04, 0x95, 0x00, 0x77, 0x00, 0xfd, 0x00, 0x77, 0x04, 0x80, 0x05, 0x99, 0x02, 0x7f, 0x01, 0x7f,
    0x01, 0x7e, 0x00, 0x7e, 0xff, 0x7e, 0xff, 0x7f, 0xff, 0x7e, 0x00, 0x7e, 0x02, 0x7e, 0xff, 0x8e,
    0x01, 0x7e, 0x00, 0x7e, 0xff, 0x7e, 0xff, 0x7f, 0xff, 0x7e, 0x00, 0x7e, 0x01, 0x7e, 0x04, 0x7e,
    0xfc, 0x7e, 0xff, 0x7e, 0x00, 0x7e, 0x01, 0x7e, 0x01, 0x7f, 0x01, 0x7e, 0x00, 0x7e, 0xff, 0x7e,
    0x01, 0x8e, 0xfe, 0x7e, 0x00, 0x7e, 0x01, 0x7e, 0x01, 0x7f, 0x01, 0x7e, 0x00, 0x7e, 0xff, 0x7e,
    0xff, 0x7f, 0xfe, 0x7f, 0x09, 0x87, 0x03, 0x86, 0x00, 0x02, 0x01, 0x03, 0x02, 0x01, 0x02, 0x00,
    0x02, 0x7f, 0x04, 0x7d, 0x02, 0x7f, 0x02, 0x00, 0x02, 0x01, 0x01, 0x02, 0xee, 0xfe, 0x01, 0x02,
    0x02, 0x01, 0x02, 0x00, 0x02, 0x7f, 0x04, 0x7d, 0x02, 0x7f, 0x02, 0x00, 0x02, 0x01, 0x01, 0x03,
    0x00, 0x02, 0x03, 0xf4, 0x10, 0x80, 0x03, 0x80, 0x07, 0x15, 0x08, 0x6b, 0xfe, 0x85, 0xf5, 0x00,
    0x10, 0xfb, 0x0d, 0x95, 0xf6, 0x00, 0x00, 0x6b, 0x0a, 0x00, 0x02, 0x02, 0x00, 0x08, 0xfe, 0x02,
    0xf6, 0x00, 0x0e, 0xf4, 0x03, 0x80, 0x00, 0x15, 0x0a, 0x00, 0x02, 0x7e, 0x00, 0x7e, 0x00, 0x7d,
    0x00, 0x7e, 0xfe, 0x7f, 0xf6, 0x00, 0x0a, 0x80, 0x02, 0x7e, 0x01, 0x7e, 0x00, 0x7d, 0xff, 0x7d,
    0xfe, 0x7f, 0xf6, 0x00, 0x10, 0x80, 0x03, 0x80, 0x00, 0x15, 0x0c, 0x00, 0xff, 0x7e, 0x03, 0xed,
    0x03, 0xfd, 0x00, 0x03, 0x02, 0x00, 0x00, 0x12, 0x02, 0x03, 0x0a, 0x00, 0x00, 0x6b, 0x02, 0x00,
    0x00, 0x7d, 0xfe, 0x83, 0xf4, 0x00, 0x11, 0x80, 0x0f, 0x80, 0xf4, 0x00, 0x00, 0x15, 0x0c, 0x00,
    0xff, 0xf6, 0xf5, 0x00, 0x0f, 0xf5, 0x04, 0x95, 0x07, 0x76, 0x00, 0x0a, 0x07, 0x80, 0xf9, 0x76,
    0x00, 0x75, 0xf8, 0x80, 0x07, 0x0c, 0x09, 0xf4, 0xf9, 0x0c, 0x09, 0xf4, 0x03, 0x92, 0x02, 0x03,
    0x07, 0x00, 0x03, 0x7d, 0x00, 0x7b, 0xfc, 0x7e, 0x04, 0x7d, 0x00, 0x7a, 0xfd, 0x7e, 0xf9, 0x00,
    0xfe, 0x02, 0x06, 0x89, 0x02, 0x00, 0x06, 0xf5, 0x03, 0x95, 0x00, 0x6b, 0x0c, 0x15, 0x00, 0x6b,
    0x02, 0x80, 0x03, 0x95, 0x00, 0x6b, 0x0c, 0x15, 0x00, 0x6b, 0xf8, 0x96, 0x03, 0x00, 0x07, 0xea,
    0x03, 0x80, 0x00, 0x15, 0x0c, 0x80, 0xf7, 0x76, 0xfd, 0x00, 0x03, 0x80, 0x0a, 0x75, 0x03, 0x80,
    0x03, 0x80, 0x07, 0x13, 0x02, 0x02, 0x03, 0x00, 0x00, 0x6b, 0x02, 0x80, 0x03, 0x80, 0x00, 0x15,
    0x09, 0x6b, 0x09, 0x15, 0x00, 0x6b, 0x03, 0x80, 0x03, 0x80, 0x00, 0x15, 0x00, 0xf6, 0x0d, 0x00,
    0x00, 0x8a, 0x00, 0x6b, 0x03, 0x80, 0x07, 0x80, 0xfd, 0x00, 0xff, 0x03, 0x00, 0x04, 0x00, 0x07,
    0x00, 0x04, 0x01, 0x02, 0x03, 0x01, 0x06, 0x00, 0x03, 0x7f, 0x01, 0x7e, 0x01, 0x7c, 0x00, 0x79,
    0xff, 0x7c, 0xff, 0x7d, 0xfd, 0x00, 0xfa, 0x00, 0x0e, 0x80, 0x03, 0x80, 0x00, 0x15, 0x0c, 0x00,
    0x00, 0x6b, 0x02, 0x80, 0x03, 0x80, 0x00, 0x15, 0x0a, 0x00, 0x02, 0x7f, 0x01, 0x7d, 0x00, 0x7b,
    0xff, 0x7e, 0xfe, 0x7f, 0xf6, 0x00, 0x10, 0xf7, 0x11, 0x8f, 0xff, 0x03, 0xff, 0x02, 0xfe, 0x01,
    0xfa, 0x00, 0xfd, 0x7f, 0xff, 0x7e, 0x00, 0x7c, 0x00, 0x79, 0x00, 0x7b, 0x01, 0x7e, 0x03, 0x00,
    0x06, 0x00, 0x02, 0x00, 0x01, 0x03, 0x01, 0x02, 0x03, 0xfb, 0x03, 0x95, 0x0c, 0x00, 0xfa, 0x80,
    0x00, 0x6b, 0x09, 0x80, 0x03, 0x95, 0x00, 0x77, 0x06, 0x7a, 0x06, 0x06, 0x00, 0x09, 0xfa, 0xf1,
    0xfa, 0x7a, 0x0e, 0x80, 0x03, 0x87, 0x00, 0x0b, 0x02, 0x02, 0x03, 0x00, 0x02, 0x7e, 0x01, 0x02,
    0x04, 0x00, 0x02, 0x7e, 0x00, 0x75, 0xfe, 0x7e, 0xfc, 0x00, 0xff, 0x01, 0xfe, 0x7f, 0xfd, 0x00,
    0xfe, 0x02, 0x07, 0x8e, 0x00, 0x6b, 0x09, 0x80, 0x03, 0x80, 0x0e, 0x15, 0xf2, 0x80, 0x0e, 0x6b,
    0x03, 0x80, 0x03, 0x95, 0x00, 0x6b, 0x0e, 0x00, 0x00, 0x7d, 0xfe, 0x98, 0x00, 0x6b, 0x05, 0x80,
    0x03, 0x95, 0x00, 0x75, 0x02, 0x7d, 0x0a, 0x00, 0x00, 0x8e, 0x00, 0x6b, 0x02, 0x80, 0x03, 0x95,
    0x00, 0x6b, 0x10, 0x00, 0x00, 0x15, 0xf8, 0x80, 0x00, 0x6b, 0x0a, 0x80, 0x03, 0x95, 0x00, 0x6b,
    0x10, 0x00, 0x00, 0x15, 0xf8, 0x80, 0x00, 0x6b, 0x0a, 0x00, 0x00, 0x7d, 0x02, 0x83, 0x10, 0x80,
    0x03, 0x95, 0x00, 0x6b, 0x09, 0x00, 0x03, 0x02, 0x00, 0x08, 0xfd, 0x02, 0xf7, 0x00, 0x0e, 0x89,
    0x00, 0x6b, 0x03, 0x80, 0x03, 0x95, 0x00, 0x6b, 0x09, 0x00, 0x03, 0x02, 0x00, 0x08, 0xfd, 0x02,
    0xf7, 0x00, 0x0e, 0xf4, 0x03, 0x92, 0x02, 0x03, 0x07, 0x00, 0x03, 0x7d, 0x00, 0x70, 0xfd, 0x7e,
    0xf9, 0x00, 0xfe, 0x02, 0x03, 0x89, 0x09, 0x00, 0x02, 0xf5, 0x03, 0x80, 0x00, 0x15, 0x00, 0xf5,
    0x07, 0x00, 0x00, 0x08, 0x02, 0x03, 0x06, 0x00, 0x02, 0x7d, 0x00, 0x70, 0xfe, 0x7e, 0xfa, 0x00,
    0xfe, 0x02, 0x00, 0x08, 0x0c, 0xf6, 0x0f, 0x80, 0x00, 0x15, 0xf6, 0x00, 0xfe, 0x7d, 0x00, 0x79,
    0x02, 0x7e, 0x0a, 0x00, 0xf4, 0xf7, 0x07, 0x09, 0x07, 0xf7, 0x03, 0x8c, 0x01, 0x02, 0x01, 0x01,
    0x05, 0x00, 0x02, 0x7f, 0x01, 0x7e, 0x00, 0x74, 0x00, 0x86, 0xff, 0x01, 0xfe, 0x01, 0xfb, 0x00,
    0xff, 0x7f, 0xff, 0x7f, 0x00, 0x7c, 0x01, 0x7e, 0x01, 0x00, 0x05, 0x00, 0x02, 0x00, 0x01, 0x02,
    0x03, 0xfe, 0x04, 0x8e, 0x02, 0x01, 0x04, 0x00, 0x02, 0x7f, 0x01, 0x7e, 0x00, 0x77, 0xff, 0x7e,
    0xfe, 0x7f, 0xfc, 0x00, 0xfe, 0x01, 0xff, 0x02, 0x00, 0x09, 0x01, 0x02, 0x02, 0x02, 0x03, 0x01,
    0x02, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0xeb, 0x03, 0x80, 0x00, 0x15, 0x03, 0x00, 0x02, 0x7e,
    0x00, 0x7b, 0xfe, 0x7e, 0xfd, 0x00, 0x03, 0x80, 0x04, 0x00, 0x03, 0x7e, 0x00, 0x78, 0xfd, 0x7e,
    0xf9, 0x00, 0x0c, 0x80, 0x03, 0x8c, 0x02, 0x02, 0x02, 0x01, 0x03, 0x00, 0x02, 0x7f, 0x01, 0x7d,
    0xfe, 0x7e, 0xf9, 0x7d, 0xff, 0x7e, 0x00, 0x7d, 0x03, 0x7f, 0x02, 0x00, 0x03, 0x01, 0x02, 0x01,
    0x02, 0xfe, 0x0d, 0x8c, 0xff, 0x02, 0xfe, 0x01, 0xfc, 0x00, 0xfe, 0x7f, 0xff, 0x7e, 0x00, 0x77,
    0x01, 0x7e, 0x02, 0x7f, 0x04, 0x00, 0x02, 0x01, 0x01, 0x02, 0x00, 0x0f, 0xff, 0x02, 0xfe, 0x01,
    0xf9, 0x00, 0x0c, 0xeb, 0x03, 0x88, 0x0a, 0x00, 0x00, 0x02, 0x00, 0x03, 0xfe, 0x02, 0xfa, 0x00,
    0xff, 0x7e, 0xff, 0x7d, 0x00, 0x7b, 0x01, 0x7c, 0x01, 0x7f, 0x06, 0x00, 0x02, 0x02, 0x03, 0xfe,
    0x03, 0x8f, 0x06, 0x77, 0x06, 0x09, 0xfa, 0x80, 0x00, 0x71, 0xff, 0x87, 0xfb, 0x79, 0x07, 0x87,
    0x05, 0x79, 0x02, 0x80, 0x03, 0x8d, 0x02, 0x02, 0x06, 0x00, 0x02, 0x7e, 0x00, 0x7d, 0xfc, 0x7d,
    0x04, 0x7e, 0x00, 0x7d, 0xfe, 0x7e, 0xfa, 0x00, 0xfe, 0x02, 0x04, 0x85, 0x02, 0x00, 0x06, 0xf9,
    0x03, 0x8f, 0x00, 0x73, 0x01, 0x7e, 0x07, 0x00, 0x02, 0x02, 0x00, 0x0d, 0x00, 0xf3, 0x01, 0x7e,
    0x03, 0x80, 0x03, 0x8f, 0x00, 0x73, 0x01, 0x7e, 0x07, 0x00, 0x02, 0x02, 0x00, 0x0d, 0x00, 0xf3,
    0x01, 0x7e, 0xf8, 0x90, 0x03, 0x00, 0x08, 0xf0, 0x03, 0x80, 0x00, 0x15, 0x00, 0xf3, 0x02, 0x00,
    0x06, 0x07, 0xfa, 0xf9, 0x07, 0x78, 0x03, 0x80, 0x03, 0x80, 0x04, 0x0c, 0x02, 0x03, 0x04, 0x00,
    0x00, 0x71, 0x02, 0x80, 0x03, 0x80, 0x00, 0x0f, 0x06, 0x77, 0x06, 0x09, 0x00, 0x71, 0x02, 0x80,
    0x03, 0x80, 0x00, 0x0f, 0x0a, 0xf1, 0x00, 0x0f, 0xf6, 0xf8, 0x0a, 0x00, 0x02, 0xf9, 0x05, 0x80,
    0xff, 0x01, 0xff, 0x04, 0x00, 0x05, 0x01, 0x03, 0x01, 0x02, 0x06, 0x00, 0x02, 0x7e, 0x00, 0x7d,
    0x00, 0x7b, 0x00, 0x7c, 0xfe, 0x7f, 0xfa, 0x00, 0x0b, 0x80, 0x03, 0x80, 0x00, 0x0f, 0x00, 0xfb,
    0x01, 0x03, 0x01, 0x02, 0x05, 0x00, 0x02, 0x7e, 0x01, 0x7d, 0x00, 0x76, 0x03, 0x80, 0x10, 0x80,
    0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x10, 0x80,
    0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x10, 0x80,
    0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x10, 0x80,
    0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x10, 0x80,
    0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x10, 0x80,
    0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x10, 0x80, 0x0a, 0x8f,
    0x02, 0x7f, 0x01, 0x7e, 0x00, 0x76, 0xff, 0x7f, 0xfe, 0x7f, 0xfb, 0x00, 0xff, 0x01, 0xff, 0x01,
    0x00, 0x0a, 0x01, 0x02, 0x01, 0x01, 0x05, 0x00, 0xf9, 0x80, 0x00, 0x6b, 0x0c, 0x86, 0x0d, 0x8a,
    0xff, 0x03, 0xfe, 0x02, 0xfb, 0x00, 0xff, 0x7e, 0xff, 0x7d, 0x00, 0x7b, 0x01, 0x7c, 0x01, 0x7f,
    0x05, 0x00, 0x02, 0x01, 0x01, 0x03, 0x03, 0xfc, 0x03, 0x80, 0x00, 0x0f, 0x00, 0xfb, 0x01, 0x03,
    0x01, 0x02, 0x04, 0x00, 0x01, 0x7e, 0x01, 0x7d, 0x00, 0x76, 0x00, 0x8a, 0x01, 0x03, 0x02, 0x02,
    0x03, 0x00, 0x02, 0x7e, 0x01, 0x7d, 0x00, 0x76, 0x03, 0x80, 0x03, 0x8f, 0x00, 0x74, 0x01, 0x7e,
    0x02, 0x7f, 0x04, 0x00, 0x02, 0x01, 0x01, 0x01, 0x00, 0x8d, 0x00, 0x6e, 0xff, 0x7e, 0xfe, 0x7f,
    0xfb, 0x00, 0xfe, 0x01, 0x0c, 0x85, 0x03, 0x8d, 0x01, 0x02, 0x03, 0x00, 0x02, 0x7e, 0x01, 0x02,
    0x03, 0x00, 0x02, 0x7e, 0x00, 0x74, 0xfe, 0x7f, 0xfd, 0x00, 0xff, 0x01, 0xfe, 0x7f, 0xfd, 0x00,
    0xff, 0x01, 0x00, 0x0c, 0x06, 0x82, 0x00, 0x6b, 0x08, 0x86, 0x03, 0x80, 0x0a, 0x0f, 0xf6, 0x80,
    0x0a, 0x71, 0x03, 0x80, 0x03, 0x8f, 0x00, 0x73, 0x01, 0x7e, 0x07, 0x00, 0x02, 0x02, 0x00, 0x0d,
    0x00, 0xf3, 0x01, 0x7e, 0x00, 0x7e, 0x03, 0x82, 0x03, 0x8f, 0x00, 0x79, 0x02, 0x7e, 0x08, 0x00,
    0x00, 0x89, 0x00, 0x71, 0x02, 0x80, 0x03, 0x8f, 0x00, 0x73, 0x01, 0x7e, 0x03, 0x00, 0x02, 0x02,
    0x00, 0x0d, 0x00, 0xf3, 0x01, 0x7e, 0x03, 0x00, 0x02, 0x02, 0x00, 0x0d, 0x00, 0xf3, 0x01, 0x7e,
    0x03, 0x80, 0x03, 0x8f, 0x00, 0x73, 0x01, 0x7e, 0x03, 0x00, 0x02, 0x02, 0x00, 0x0d, 0x00, 0xf3,
    0x01, 0x7e, 0x03, 0x00, 0x02, 0x02, 0x00, 0x0d, 0x00, 0xf3, 0x01, 0x7e, 0x00, 0x7e, 0x03, 0x82,
    0x03, 0x8d, 0x00, 0x02, 0x02, 0x00, 0x00, 0x71, 0x08, 0x00, 0x02, 0x02, 0x00, 0x06, 0xfe, 0x02,
    0xf8, 0x00, 0x0c, 0xf6, 0x03, 0x8f, 0x00, 0x71, 0x07, 0x00, 0x02, 0x02, 0x00, 0x06, 0xfe, 0x02,
    0xf9, 0x00, 0x0c, 0x85, 0x00, 0x71, 0x02, 0x80, 0x03, 0x8f, 0x00, 0x71, 0x07, 0x00, 0x03, 0x02,
    0x00, 0x06, 0xfd, 0x02, 0xf9, 0x00, 0x0c, 0xf6, 0x03, 0x8d, 0x02, 0x02, 0x06, 0x00, 0x02, 0x7e,
    0x00, 0x75, 0xfe, 0x7e, 0xfa, 0x00, 0xfe, 0x02, 0x04, 0x85, 0x06, 0x00, 0x02, 0xf9, 0x03, 0x80,
    0x00, 0x0f, 0x00, 0xf8, 0x04, 0x00, 0x00, 0x06, 0x02, 0x02, 0x04, 0x00, 0x02, 0x7e, 0x00, 0x75,
    0xfe, 0x7e, 0xfc, 0x00, 0xfe, 0x02, 0x00, 0x05, 0x0a, 0xf9, 0x0d, 0x80, 0x00, 0x0f, 0xf7, 0x00,
    0xff, 0x7e, 0x00, 0x7b, 0x01, 0x7e, 0x09, 0x00, 0xf6, 0xfa, 0x04, 0x06, 0x08, 0xfa,
];
